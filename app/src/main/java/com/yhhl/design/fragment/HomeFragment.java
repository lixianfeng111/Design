package com.yhhl.design.fragment;import android.Manifest;import android.content.Intent;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import com.baidu.location.BDAbstractLocationListener;import com.baidu.location.BDLocation;import com.baidu.location.LocationClient;import com.baidu.location.LocationClientOption;import com.google.gson.Gson;import com.othershe.baseadapter.ViewHolder;import com.othershe.baseadapter.interfaces.OnItemClickListener;import com.othershe.baseadapter.interfaces.OnLoadMoreListener;import com.qweather.sdk.bean.air.AirNowBean;import com.qweather.sdk.bean.base.Code;import com.qweather.sdk.bean.base.Lang;import com.qweather.sdk.bean.base.Range;import com.qweather.sdk.bean.base.Unit;import com.qweather.sdk.bean.geo.GeoBean;import com.qweather.sdk.bean.weather.WeatherDailyBean;import com.qweather.sdk.bean.weather.WeatherNowBean;import com.qweather.sdk.view.QWeather;import com.yhhl.design.R;import com.yhhl.design.base.BaseFragment;import com.yhhl.design.choosearea.ChooseAreaActivity;import com.yhhl.design.event.AddEvent;import com.yhhl.design.home.adapter.HomeAdapter;import com.yhhl.design.home.countersign.CountersignFragment;import com.yhhl.design.home.designchange.DesignChangeFragment;import com.yhhl.design.home.designinspection.DesignInspectionFragment;import com.yhhl.design.home.designresult.DesignResultFragment;import com.yhhl.design.home.drawing.fragment.DrawingFragment;import com.yhhl.design.home.informeach.InformEachFragment;import com.yhhl.design.home.majorrequirement.MajorRequirementFragment;import com.yhhl.design.home.openinformation.OpenInformationFragment;import com.yhhl.design.home.progressplan.fragment.ProgressPlanFragment;import com.yhhl.design.home.review.ReviewFragment;import com.yhhl.design.home.visualfieldcloth.VisualFieldClothFragment;import com.yhhl.design.net.LogUtil;import com.yhhl.design.util.GlideUtil;import com.yhhl.design.util.SpzUtils;import com.yhhl.design.util.TimeFormartUtils;import com.yhhl.design.weather.bean.HeWeather5;import com.yhhl.design.weather.presenter.WeatherPresenter;import com.yhhl.design.weather.view.WeatherView;import org.greenrobot.eventbus.EventBus;import java.util.ArrayList;import java.util.List;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import butterknife.BindView;import pub.devrel.easypermissions.EasyPermissions;public class HomeFragment extends BaseFragment<WeatherPresenter> implements WeatherView {    @BindView(R.id.title)    TextView title;    @BindView(R.id.right_icon)    ImageView right_icon;    @BindView(R.id.back)    ImageView back;    @BindView(R.id.recyclerView)    RecyclerView recyclerView;    @BindView(R.id.weatherBa)    ImageView weatherBa;    @BindView(R.id.city)    TextView city;    @BindView(R.id.now_temperature)    TextView now_temperature;    @BindView(R.id.date)    TextView date;    @BindView(R.id.week)    TextView week;    @BindView(R.id.weather)    TextView weather;    @BindView(R.id.today_temperature)    TextView today_temperature;    @BindView(R.id.wind)    TextView wind;    @BindView(R.id.air_quality)    TextView air_quality;    @BindView(R.id.aqi)    TextView aqi;    @BindView(R.id.tomorrow_weather)    TextView tomorrow_weather;    @BindView(R.id.tomorrow_temperature)    TextView tomorrow_temperature;    @BindView(R.id.tomorrow_wind)    TextView tomorrow_wind;    private HomeAdapter homeAdapter;    private List<String> data;    //初始化集合装载权限    private String[] permssions={Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION};    private String requestBingPic = "http://guolin.tech/api/bing_pic";    private String countyName;    private String locationWeatherId;    private LocationClient locationClient;    private static final int REQUEST_CODE = 1024;    @Override    public void initView() {        title.setText("设计协同管理平台");        back.setVisibility(View.GONE);        right_icon.setVisibility(View.VISIBLE);        right_icon.setImageResource(R.mipmap.search);    }    @Override    public void initListener() {        data = new ArrayList<>();        data.add("设计成果" + "\n");        data.add("进度计划" + "\n");        data.add("图纸校审单" + "\n");        data.add("图纸会审" + "\n");        data.add("设计方案评审" + "\n");        data.add("设计资料互提" + "\n");        data.add("设计样板及" + "\n" + "标准化文件");        data.add("对图会签" + "\n");        data.add("设计变更" + "\n");        data.add("征拆信息" + "\n");        data.add("可视化场布" + "\n");        data.add("展开" + "\n");        String countyName = SpzUtils.getString("countyName");        locationWeatherId = SpzUtils.getString("locationWeatherId");        if (!countyName.isEmpty() && !locationWeatherId.isEmpty()) {            city.setText(countyName);        }        city.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivityForResult(new Intent(getActivity(), ChooseAreaActivity.class), 1);            }        });    }    @Override    public void initData() {        homeAdapter = new HomeAdapter(getContext(), data, true);        homeAdapter.setLoadingView(R.layout.load_loading_layout);        homeAdapter.setLoadFailedView(R.layout.load_failed_layout);        homeAdapter.setOnLoadMoreListener(new OnLoadMoreListener() {            @Override            public void onLoadMore(boolean isReload) {                loadMore();            }        });        homeAdapter.setOnItemClickListener(new OnItemClickListener<String>() {            @Override            public void onItemClick(ViewHolder viewHolder, String data, int position) {                intent(position);            }        });        homeAdapter.setOnClickPositionListener(new HomeAdapter.OnClickPositionListener() {            @Override            public void OnClickPositionListener(int position) {                intent(position);            }        });        GridLayoutManager gridLayoutManager = new GridLayoutManager(getContext(), 3);        //禁用滑动事件//        GridLayoutManager gridLayoutManager = new GridLayoutManager(getContext(),3){//            @Override//            public boolean canScrollVertically() {//                return false;//            }//        };        gridLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);        recyclerView.setLayoutManager(gridLayoutManager);        recyclerView.setAdapter(homeAdapter);        //禁用滑动事件        recyclerView.setNestedScrollingEnabled(false);        if (EasyPermissions.hasPermissions(getContext(), permssions)) {            //已经打开权限            initLocationOption();//            getLocationLL();        } else {            //没有打开相关权限、申请权限            EasyPermissions.requestPermissions(this, "需要获取您的位置权限", 2, permssions);        }    }    /**     * 定位：获取经纬度     *///    private void getLocationLL() {//        LogUtil.d("*************", "获取定位权限1 - 开始");//        Location location = getLastKnownLocation();//        if (location != null) {//            //日志//            String locationStr = location.getLatitude() + "," + location.getLongitude();//            update(location.getLongitude()+","+location.getLatitude());//            LogUtil.d("*************", "经纬度：" + locationStr);//        } else {//            LogUtil.d("*************", "获取定位权限7 - " + "位置获取失败");//        }//    }//    /**//     * 定位：得到位置对象//     * @return//     *///    private Location getLastKnownLocation() {//        //获取地理位置管理器//        LocationManager mLocationManager = (LocationManager) getActivity().getSystemService(LOCATION_SERVICE);//        List<String> providers = mLocationManager.getProviders(true);//        Location bestLocation = null;//        for (String provider : providers) {//            @SuppressLint("MissingPermission") Location l = mLocationManager.getLastKnownLocation(provider);//            if (l == null) {//                continue;//            }//            if (bestLocation == null || l.getAccuracy() < bestLocation.getAccuracy()) {//                // Found best last known location: %s", l);//                bestLocation = l;//            }//        }//        return bestLocation;//    }    @Override    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode==1){            if (data!=null){                Bundle bundle = data.getExtras();                countyName = bundle.getString("countyName");                locationWeatherId = bundle.getString("locationWeatherId");                city.setText(countyName);                update(locationWeatherId);            }        }    }    private void update(String locationWeatherId) {        //启动图片更新,异步        updateBingPic();        //有网的情况        getWeather(locationWeatherId);    }    private void updateBingPic() {        miBasePresenter.getImage(requestBingPic);    }    private void getWeather(String locationWeatherId) {        QWeather.getGeoCityLookup(getContext(), locationWeatherId, Range.CN, 20, Lang.ZH_HANS, new QWeather.OnResultGeoListener() {            @Override            public void onError(Throwable throwable) {                Log.i("TAG", "getGeoCityLookup onError: " + throwable);            }            @Override            public void onSuccess(GeoBean geoBean) {                Log.i("TAG", "getGeoCityLookup onSuccess: " + new Gson().toJson(geoBean));                if(countyName==null){                    city.setText(geoBean.getLocationBean().get(0).getName());                }            }        });        QWeather.getAirNow(getContext(), locationWeatherId, Lang.ZH_HANS, new QWeather.OnResultAirNowListener() {            @Override            public void onError(Throwable throwable) {                LogUtil.d("getAirNow onError",throwable.getMessage());            }            @Override            public void onSuccess(AirNowBean airNowBean) {                Code code = airNowBean.getCode();                String code1 = code.getCode();                if (code1.equals("200")){                    AirNowBean.NowBean now = airNowBean.getNow();                    air_quality.setText("空气质量："+now.getCategory());                    aqi.setText("空气指数："+now.getAqi());                }            }        });        QWeather.getWeatherNow(getActivity(),locationWeatherId, Lang.ZH_HANS, Unit.METRIC, new QWeather.OnResultWeatherNowListener() {            @Override            public void onError(Throwable e) {                Log.i(TAG, "getWeather onError: " + e);            }            @Override            public void onSuccess(WeatherNowBean weatherBean) {                Log.i(TAG, "getWeather onSuccess: " + new Gson().toJson(weatherBean));                //先判断返回的status是否正确，当status正确时获取数据，若status不正确，可查看status对应的Code值找到原因                if (Code.OK == weatherBean.getCode()) {                    WeatherNowBean.NowBaseBean now = weatherBean.getNow();                    now_temperature.setText(now.getTemp()+ "℃");//现在温度                    date.setText(TimeFormartUtils.getTimeDay());//今天日期                    weather.setText(now.getText());//现在天气情况                    wind.setText(now.getWindDir()+now.getWindScale()+"级");//现在的风向和风力                    week.setText(TimeFormartUtils.getWeek());//星期                } else {                    //在此查看返回数据失败的原因                    Code code = weatherBean.getCode();                    Log.i(TAG, "failed code: " + code);                }            }        });        QWeather.getWeather3D(getContext(), locationWeatherId, Lang.ZH_HANS, Unit.METRIC, new QWeather.OnResultWeatherDailyListener() {            @Override            public void onError(Throwable throwable) {                LogUtil.d("getWeather3D onError"+throwable.getMessage());            }            @Override            public void onSuccess(WeatherDailyBean weatherDailyBean) {                List<WeatherDailyBean.DailyBean> daily = weatherDailyBean.getDaily();                WeatherDailyBean.DailyBean dailyBean = daily.get(0);                //今天温度范围                today_temperature.setText(dailyBean.getTempMin()+"/"+dailyBean.getTempMax()+ "℃");                WeatherDailyBean.DailyBean dailyBean1 = daily.get(1);                tomorrow_weather.setText("明天白天："+dailyBean1.getTextDay()+"  "+"夜晚："+dailyBean1.getTextNight());                tomorrow_wind.setText(dailyBean1.getWindDirDay()+dailyBean1.getWindScaleDay()+"级");                tomorrow_temperature.setText(dailyBean1.getTempMin()+"/"+dailyBean1.getTempMax()+ "℃");            }        });    }    private void intent(int position) {        switch (position){            case 0:                EventBus.getDefault().post(new AddEvent(new DesignResultFragment()));                break;            case 1:                EventBus.getDefault().post(new AddEvent(new ProgressPlanFragment()));                break;            case 2:                EventBus.getDefault().post(new AddEvent(new DesignInspectionFragment()));                break;            case 3:                EventBus.getDefault().post(new AddEvent(new DrawingFragment()));                break;            case 4:                EventBus.getDefault().post(new AddEvent(new ReviewFragment()));                break;            case 5:                EventBus.getDefault().post(new AddEvent(new InformEachFragment()));                break;            case 6:                EventBus.getDefault().post(new AddEvent(new MajorRequirementFragment()));                break;            case 7:                EventBus.getDefault().post(new AddEvent(new CountersignFragment()));                break;            case 8:                EventBus.getDefault().post(new AddEvent(new DesignChangeFragment()));                break;            case 9:                if (HomeAdapter.name_title.equals("征拆信息")){                    EventBus.getDefault().post(new AddEvent(new OpenInformationFragment()));                }                break;            case 10:                EventBus.getDefault().post(new AddEvent(new VisualFieldClothFragment()));                break;        }    }    private void loadMore() {        homeAdapter.loadEnd();    }    @Override    public int initLayoutId() {        return R.layout.fragment_home;    }    @Override    public void initVariable() {    }    @Override    public WeatherPresenter initPresenter() {        return new WeatherPresenter(this);    }    @Override    public void OnGetImageSuccess(String imageBean) {        GlideUtil.showImage(getContext(),weatherBa,imageBean);    }    @Override    public void showLoading() {    }    @Override    public void hideLoading() {    }    @Override    public void onDataSuccess(HeWeather5 data) {    }    @Override    public void onDataFailed(String msg) {    }    @Override    public void onDataList(List<HeWeather5> list) {    }//    /**//     * 初始化定位参数配置//     */    private void initLocationOption() {        //定位服务的客户端。宿主程序在客户端声明此类，并调用，目前只支持在主线程中启动        locationClient = new LocationClient(getContext());        //声明LocationClient类实例并配置定位参数        MyLocationListener myLocationListener = new MyLocationListener();        locationClient.registerLocationListener(myLocationListener);        LocationClientOption locationOption = new LocationClientOption();        //可选，设置是否需要地址信息，默认不需要        locationOption.setIsNeedAddress(true);        locationOption.setAddrType("all"); //加上这个配置后才可以取到详细地址信息        ////需将配置好的LocationClientOption对象，通过setLocOption方法传递给LocationClient对象使用        locationClient.setLocOption(locationOption);        //开始定位        locationClient.start();    }    /**     * 实现定位回调     */    public class MyLocationListener extends BDAbstractLocationListener {        @Override        public void onReceiveLocation(BDLocation location){            String city = location.getCity();    //获取城市            String district = location.getDistrict();    //获取区县            LogUtil.d("定位：",location.getAltitude()+","+location.getLongitude());            LogUtil.d("定位：",city+":"+district);            LogUtil.d("经纬度：",location.getLatitude()+","+location.getLongitude());            update(location.getLongitude()+","+location.getLatitude());        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode==2){            initLocationOption();//            getLocationLL();        }    }    @Override    public void onDestroy() {        super.onDestroy();        if (locationClient!=null){            locationClient.stop();        }    }}